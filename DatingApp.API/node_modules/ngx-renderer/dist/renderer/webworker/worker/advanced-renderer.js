import { Injectable } from '@angular/core';
import { ClientMessageBrokerFactory, FnArg, UiArguments } from '@angular/platform-webworker';
import { AdvancedRenderer, AdvancedRendererMethod } from '../../advanced-renderer';
import { elementExpression } from '../../expression';
import { RENDERER_CALL_TASK, RENDERER_CHANNEL } from '../shared/advanced-renderer';
export class AdvancedRendererWorker extends AdvancedRenderer {
    /**
     * @param {?} brokerFactory
     */
    constructor(brokerFactory) {
        super();
        this.brokerFactory = brokerFactory;
        this.broker = this.brokerFactory.createMessageBroker(RENDERER_CHANNEL, false);
    }
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) {
        return this._callTask(AdvancedRendererMethod.execute, [expression, args]);
    }
    /**
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeElementMethod, [elementExpression(element), method, args]);
    }
    /**
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeGlobalTargetMethod, [target, method, args]);
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) {
        this._callTask(AdvancedRendererMethod.setGlobalTargetPropery, [target, prop, value]);
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) {
        return this._callTask(AdvancedRendererMethod.getGlobalTargetProperty, [target, prop]);
    }
    /**
     * @param {?} task
     * @param {?=} args
     * @return {?}
     */
    _callTask(task, args) {
        const /** @type {?} */ taskArg = new FnArg(task, 1 /* PRIMITIVE */);
        const /** @type {?} */ argsArg = new FnArg(args, 1 /* PRIMITIVE */);
        const /** @type {?} */ uiArgs = new UiArguments(RENDERER_CALL_TASK, [taskArg, argsArg]);
        return this.broker.runOnService(uiArgs, 1 /* PRIMITIVE */);
    }
}
AdvancedRendererWorker.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererWorker.ctorParameters = () => [
    { type: ClientMessageBrokerFactory, },
];
function AdvancedRendererWorker_tsickle_Closure_declarations() {
    /** @type {?} */
    AdvancedRendererWorker.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    AdvancedRendererWorker.ctorParameters;
    /** @type {?} */
    AdvancedRendererWorker.prototype.broker;
    /** @type {?} */
    AdvancedRendererWorker.prototype.brokerFactory;
}
//# sourceMappingURL=advanced-renderer.js.map