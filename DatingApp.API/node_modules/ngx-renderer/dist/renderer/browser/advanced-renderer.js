import { Injectable } from '@angular/core';
import { AdvancedRenderer } from '../advanced-renderer';
import { isCallExpression, isElementExpression, isExpression, isLiteralExpression, } from '../expression';
export class AdvancedRendererImpl extends AdvancedRenderer {
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) {
        const { argNames, argsResolved } = this._resolveArgs(args);
        const /** @type {?} */ fn = new Function(argNames.join(','), expression);
        return Promise.resolve().then(() => fn(...argsResolved));
    }
    /**
     * @param {?} element
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) {
        return this.execute(`return element.${method}.apply(element, args)`, { element, args });
    }
    /**
     * @param {?} target
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) {
        return this.execute(`return ${target}.${method}.apply(${target}, args)`, { args });
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) {
        this.execute(`${target}.${prop} = value`, { value });
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) {
        return this.execute(`return ${target}.${prop}`);
    }
    /**
     * @param {?=} args
     * @return {?}
     */
    _resolveArgs(args = {}) {
        const /** @type {?} */ argNames = Object.keys(args);
        const /** @type {?} */ argsResolved = this._resolveArgsArray(argNames.map(name => args[name]));
        return { argNames, argsResolved };
    }
    /**
     * @param {?} args
     * @return {?}
     */
    _resolveArgsArray(args) {
        return args.map(arg => this._resolveExpression(arg));
    }
    /**
     * @param {?} expr
     * @return {?}
     */
    _resolveExpression(expr) {
        if (isExpression(expr)) {
            if (isLiteralExpression(expr) || isElementExpression(expr)) {
                return expr.value;
            }
            if (isCallExpression(expr)) {
                return this.getMethod(expr.method)(...this._resolveArgsArray(expr.args));
            }
            throw Error(`Unknown expression type '${expr.__expr_type}'`);
        }
        else {
            return expr;
        }
    }
}
AdvancedRendererImpl.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererImpl.ctorParameters = () => [];
function AdvancedRendererImpl_tsickle_Closure_declarations() {
    /** @type {?} */
    AdvancedRendererImpl.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    AdvancedRendererImpl.ctorParameters;
}
export const /** @type {?} */ ADVANCED_RENDERER_PROVIDERS = [
    { provide: AdvancedRenderer, useClass: AdvancedRendererImpl },
];
//# sourceMappingURL=advanced-renderer.js.map