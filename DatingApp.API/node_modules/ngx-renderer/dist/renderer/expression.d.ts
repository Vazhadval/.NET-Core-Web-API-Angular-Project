import { AdvancedRendererMethod } from './advanced-renderer';
export interface ExpressionArguments {
    [argName: string]: AllExpressions;
}
export declare enum ExpressionType {
    Abstract = 0,
    Literal = 1,
    Call = 2,
    Element = 3,
}
export interface ExpressionArgument {
    __expr_type: ExpressionType.Abstract;
}
export interface LiteralExpression<T> {
    __expr_type: ExpressionType.Literal;
    value: T;
}
export interface ElementExpression {
    __expr_type: ExpressionType.Element;
    value: any;
}
export interface CallExpression {
    __expr_type: ExpressionType.Call;
    method: AdvancedRendererMethod;
    args?: AllExpressions[];
}
export declare type PrimitiveType = object | string | number | boolean | null | undefined;
export declare type Expression = LiteralExpression<any> | CallExpression | ElementExpression | ExpressionArgument;
export declare type AllExpressions = Expression | PrimitiveType;
export declare type AssertExpression<T extends Expression> = (expr: Expression) => expr is T;
export declare function literalExpression<T>(value: T): LiteralExpression<T>;
export declare function elementExpression(element: any): ElementExpression;
export declare function callExpression<T>(method: AdvancedRendererMethod, args?: AllExpressions[]): CallExpression;
export declare function isExpression(obj: AllExpressions | any): obj is Expression;
export declare function isExpressionOfType<T extends Expression>(type: ExpressionType, expr: Expression): expr is T;
export declare const isLiteralExpression: AssertExpression<LiteralExpression<any>>;
export declare const isElementExpression: AssertExpression<ElementExpression>;
export declare const isCallExpression: AssertExpression<CallExpression>;
