export let ExpressionType = {};
ExpressionType.Abstract = 0;
ExpressionType.Literal = 1;
ExpressionType.Call = 2;
ExpressionType.Element = 3;
ExpressionType[ExpressionType.Abstract] = "Abstract";
ExpressionType[ExpressionType.Literal] = "Literal";
ExpressionType[ExpressionType.Call] = "Call";
ExpressionType[ExpressionType.Element] = "Element";
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
export function literalExpression(value) {
    return { __expr_type: ExpressionType.Literal, value };
}
/**
 * @param {?} element
 * @return {?}
 */
export function elementExpression(element) {
    return { __expr_type: ExpressionType.Element, value: element };
}
/**
 * @template T
 * @param {?} method
 * @param {?=} args
 * @return {?}
 */
export function callExpression(method, args) {
    return { __expr_type: ExpressionType.Call, method, args };
}
/**
 * @param {?} obj
 * @return {?}
 */
export function isExpression(obj) {
    return obj && ((obj)).__expr_type !== undefined;
}
/**
 * @template T
 * @param {?} type
 * @param {?} expr
 * @return {?}
 */
export function isExpressionOfType(type, expr) {
    return expr && expr.__expr_type === type;
}
export const /** @type {?} */ isLiteralExpression = (isExpressionOfType.bind(null, ExpressionType.Literal));
export const /** @type {?} */ isElementExpression = (isExpressionOfType.bind(null, ExpressionType.Element));
export const /** @type {?} */ isCallExpression = (isExpressionOfType.bind(null, ExpressionType.Call));
//# sourceMappingURL=expression.js.map