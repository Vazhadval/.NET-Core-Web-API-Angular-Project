export let AdvancedRendererMethod = {};
AdvancedRendererMethod.execute = 0;
AdvancedRendererMethod.invokeElementMethod = 1;
AdvancedRendererMethod.invokeGlobalTargetMethod = 2;
AdvancedRendererMethod.setGlobalTargetPropery = 3;
AdvancedRendererMethod.getGlobalTargetProperty = 4;
AdvancedRendererMethod[AdvancedRendererMethod.execute] = "execute";
AdvancedRendererMethod[AdvancedRendererMethod.invokeElementMethod] = "invokeElementMethod";
AdvancedRendererMethod[AdvancedRendererMethod.invokeGlobalTargetMethod] = "invokeGlobalTargetMethod";
AdvancedRendererMethod[AdvancedRendererMethod.setGlobalTargetPropery] = "setGlobalTargetPropery";
AdvancedRendererMethod[AdvancedRendererMethod.getGlobalTargetProperty] = "getGlobalTargetProperty";
/**
 * @abstract
 */
export class AdvancedRenderer {
    /**
     * @abstract
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) { }
    /**
     * @abstract
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) { }
    /**
     * @param {?} method
     * @return {?}
     */
    getMethod(method) {
        switch (method) {
            case AdvancedRendererMethod.execute: return this.execute;
            case AdvancedRendererMethod.getGlobalTargetProperty: return this.getGlobalTargetProperty;
            case AdvancedRendererMethod.invokeElementMethod: return this.invokeElementMethod;
            case AdvancedRendererMethod.invokeGlobalTargetMethod: return this.invokeGlobalTargetMethod;
            case AdvancedRendererMethod.setGlobalTargetPropery: return this.setGlobalTargetPropery;
            default: throw Error(`AdvancedRenderer: Unkown method [${method}]`);
        }
    }
}
//# sourceMappingURL=advanced-renderer.js.map