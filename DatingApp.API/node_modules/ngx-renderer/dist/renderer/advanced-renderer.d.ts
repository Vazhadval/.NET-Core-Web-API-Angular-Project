import { ExpressionArguments } from './expression';
export declare type RendererGlobalTarget = 'window' | 'document';
export declare enum AdvancedRendererMethod {
    execute = 0,
    invokeElementMethod = 1,
    invokeGlobalTargetMethod = 2,
    setGlobalTargetPropery = 3,
    getGlobalTargetProperty = 4,
}
export declare abstract class AdvancedRenderer {
    abstract execute(expression: string, args?: ExpressionArguments): Promise<any>;
    abstract invokeElementMethod(element: any, method: string, args?: any[]): Promise<any>;
    abstract invokeGlobalTargetMethod(target: RendererGlobalTarget, method: string, args?: any[]): Promise<any>;
    abstract setGlobalTargetPropery(target: RendererGlobalTarget, prop: string, value: any): void;
    abstract getGlobalTargetProperty(target: RendererGlobalTarget, prop: string): Promise<any>;
    getMethod(method: AdvancedRendererMethod): (...args: any[]) => any;
}
