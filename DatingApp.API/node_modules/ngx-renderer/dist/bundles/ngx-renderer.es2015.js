import { Injectable, NgModule, PLATFORM_INITIALIZER } from '@angular/core';
import { ClientMessageBrokerFactory, FnArg, ServiceMessageBrokerFactory, UiArguments } from '@angular/platform-webworker';
import { Serializer } from '@angular/platform-webworker/src/web_workers/shared/serializer';

let AdvancedRendererMethod = {};
AdvancedRendererMethod.execute = 0;
AdvancedRendererMethod.invokeElementMethod = 1;
AdvancedRendererMethod.invokeGlobalTargetMethod = 2;
AdvancedRendererMethod.setGlobalTargetPropery = 3;
AdvancedRendererMethod.getGlobalTargetProperty = 4;
AdvancedRendererMethod[AdvancedRendererMethod.execute] = "execute";
AdvancedRendererMethod[AdvancedRendererMethod.invokeElementMethod] = "invokeElementMethod";
AdvancedRendererMethod[AdvancedRendererMethod.invokeGlobalTargetMethod] = "invokeGlobalTargetMethod";
AdvancedRendererMethod[AdvancedRendererMethod.setGlobalTargetPropery] = "setGlobalTargetPropery";
AdvancedRendererMethod[AdvancedRendererMethod.getGlobalTargetProperty] = "getGlobalTargetProperty";
/**
 * @abstract
 */
class AdvancedRenderer {
    /**
     * @abstract
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) { }
    /**
     * @abstract
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) { }
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) { }
    /**
     * @param {?} method
     * @return {?}
     */
    getMethod(method) {
        switch (method) {
            case AdvancedRendererMethod.execute: return this.execute;
            case AdvancedRendererMethod.getGlobalTargetProperty: return this.getGlobalTargetProperty;
            case AdvancedRendererMethod.invokeElementMethod: return this.invokeElementMethod;
            case AdvancedRendererMethod.invokeGlobalTargetMethod: return this.invokeGlobalTargetMethod;
            case AdvancedRendererMethod.setGlobalTargetPropery: return this.setGlobalTargetPropery;
            default: throw Error(`AdvancedRenderer: Unkown method [${method}]`);
        }
    }
}

let ExpressionType = {};
ExpressionType.Abstract = 0;
ExpressionType.Literal = 1;
ExpressionType.Call = 2;
ExpressionType.Element = 3;
ExpressionType[ExpressionType.Abstract] = "Abstract";
ExpressionType[ExpressionType.Literal] = "Literal";
ExpressionType[ExpressionType.Call] = "Call";
ExpressionType[ExpressionType.Element] = "Element";
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function literalExpression(value) {
    return { __expr_type: ExpressionType.Literal, value };
}
/**
 * @param {?} element
 * @return {?}
 */
function elementExpression(element) {
    return { __expr_type: ExpressionType.Element, value: element };
}
/**
 * @template T
 * @param {?} method
 * @param {?=} args
 * @return {?}
 */
function callExpression(method, args) {
    return { __expr_type: ExpressionType.Call, method, args };
}
/**
 * @param {?} obj
 * @return {?}
 */
function isExpression(obj) {
    return obj && ((obj)).__expr_type !== undefined;
}
/**
 * @template T
 * @param {?} type
 * @param {?} expr
 * @return {?}
 */
function isExpressionOfType(type, expr) {
    return expr && expr.__expr_type === type;
}
const isLiteralExpression = (isExpressionOfType.bind(null, ExpressionType.Literal));
const isElementExpression = (isExpressionOfType.bind(null, ExpressionType.Element));
const isCallExpression = (isExpressionOfType.bind(null, ExpressionType.Call));

class AdvancedRendererImpl extends AdvancedRenderer {
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) {
        const { argNames, argsResolved } = this._resolveArgs(args);
        const /** @type {?} */ fn = new Function(argNames.join(','), expression);
        return Promise.resolve().then(() => fn(...argsResolved));
    }
    /**
     * @param {?} element
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) {
        return this.execute(`return element.${method}.apply(element, args)`, { element, args });
    }
    /**
     * @param {?} target
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) {
        return this.execute(`return ${target}.${method}.apply(${target}, args)`, { args });
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) {
        this.execute(`${target}.${prop} = value`, { value });
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) {
        return this.execute(`return ${target}.${prop}`);
    }
    /**
     * @param {?=} args
     * @return {?}
     */
    _resolveArgs(args = {}) {
        const /** @type {?} */ argNames = Object.keys(args);
        const /** @type {?} */ argsResolved = this._resolveArgsArray(argNames.map(name => args[name]));
        return { argNames, argsResolved };
    }
    /**
     * @param {?} args
     * @return {?}
     */
    _resolveArgsArray(args) {
        return args.map(arg => this._resolveExpression(arg));
    }
    /**
     * @param {?} expr
     * @return {?}
     */
    _resolveExpression(expr) {
        if (isExpression(expr)) {
            if (isLiteralExpression(expr) || isElementExpression(expr)) {
                return expr.value;
            }
            if (isCallExpression(expr)) {
                return this.getMethod(expr.method)(...this._resolveArgsArray(expr.args));
            }
            throw Error(`Unknown expression type '${expr.__expr_type}'`);
        }
        else {
            return expr;
        }
    }
}
AdvancedRendererImpl.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererImpl.ctorParameters = () => [];
const ADVANCED_RENDERER_PROVIDERS = [
    { provide: AdvancedRenderer, useClass: AdvancedRendererImpl },
];

class AdvancedRendererModule {
}
AdvancedRendererModule.decorators = [
    { type: NgModule, args: [{
                providers: ADVANCED_RENDERER_PROVIDERS
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererModule.ctorParameters = () => [];

const RENDERER_CHANNEL = 'RENDERER_CHANNEL';
const RENDERER_CALL_TASK = 'RENDERER_CALL_TASK';

class AdvancedRendererWorker extends AdvancedRenderer {
    /**
     * @param {?} brokerFactory
     */
    constructor(brokerFactory) {
        super();
        this.brokerFactory = brokerFactory;
        this.broker = this.brokerFactory.createMessageBroker(RENDERER_CHANNEL, false);
    }
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    execute(expression, args) {
        return this._callTask(AdvancedRendererMethod.execute, [expression, args]);
    }
    /**
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeElementMethod, [elementExpression(element), method, args]);
    }
    /**
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeGlobalTargetMethod, [target, method, args]);
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) {
        this._callTask(AdvancedRendererMethod.setGlobalTargetPropery, [target, prop, value]);
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) {
        return this._callTask(AdvancedRendererMethod.getGlobalTargetProperty, [target, prop]);
    }
    /**
     * @param {?} task
     * @param {?=} args
     * @return {?}
     */
    _callTask(task, args) {
        const /** @type {?} */ taskArg = new FnArg(task, 1 /* PRIMITIVE */);
        const /** @type {?} */ argsArg = new FnArg(args, 1 /* PRIMITIVE */);
        const /** @type {?} */ uiArgs = new UiArguments(RENDERER_CALL_TASK, [taskArg, argsArg]);
        return this.broker.runOnService(uiArgs, 1 /* PRIMITIVE */);
    }
}
AdvancedRendererWorker.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererWorker.ctorParameters = () => [
    { type: ClientMessageBrokerFactory, },
];

class AdvancedRendererWorkerModule {
}
AdvancedRendererWorkerModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: AdvancedRenderer, useClass: AdvancedRendererWorker },
                ]
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererWorkerModule.ctorParameters = () => [];

class AdvancedRendererUi {
    /**
     * @param {?} brokerFactory
     * @param {?} renderer
     * @param {?} serializer
     */
    constructor(brokerFactory, renderer, serializer) {
        this.brokerFactory = brokerFactory;
        this.renderer = renderer;
        this.serializer = serializer;
        this.broker = this.brokerFactory.createMessageBroker(RENDERER_CHANNEL, false);
    }
    /**
     * @return {?}
     */
    setup() {
        this.broker.registerMethod(RENDERER_CALL_TASK, [1 /* PRIMITIVE */, 1 /* PRIMITIVE */], this._callTask.bind(this), 1 /* PRIMITIVE */);
    }
    /**
     * @param {?} task
     * @param {?} args
     * @return {?}
     */
    _callTask(task, args) {
        return this.renderer.getMethod(task)(...this._deserializeArgs(args));
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    _deserializeArgs(arg) {
        if (Array.isArray(arg)) {
            return arg.map(a => this._deserializeArgs(a));
        }
        else if (typeof arg === 'object') {
            if (isElementExpression(arg)) {
                arg.value = this.serializer.deserialize(arg.value, 2 /* RENDER_STORE_OBJECT */);
            }
            else {
                Object.keys(arg || {}).forEach(key => arg[key] = this._deserializeArgs(arg[key]));
            }
        }
        return arg;
    }
}
AdvancedRendererUi.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererUi.ctorParameters = () => [
    { type: ServiceMessageBrokerFactory, },
    { type: AdvancedRenderer, },
    { type: Serializer, },
];

/**
 * @param {?} renderer
 * @return {?}
 */
function initUiRenderer(renderer) {
    return () => renderer.setup();
}
const ADVANCED_RENDERER_UI_PROVIDERS = [
    ADVANCED_RENDERER_PROVIDERS,
    AdvancedRendererUi,
    { provide: PLATFORM_INITIALIZER, useFactory: initUiRenderer, deps: [AdvancedRendererUi], multi: true },
];

class AdvancedRendererNoop extends AdvancedRenderer {
    /**
     * @param {?} expression
     * @param {?} args
     * @return {?}
     */
    execute(expression, args) {
        return Promise.resolve();
    }
    /**
     * @param {?} element
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeElementMethod(element, method, args) {
        return Promise.resolve();
    }
    /**
     * @param {?} target
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    invokeGlobalTargetMethod(target, method, args) {
        return Promise.resolve();
    }
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    setGlobalTargetPropery(target, prop, value) { }
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    getGlobalTargetProperty(target, prop) {
        return Promise.resolve();
    }
}
AdvancedRendererNoop.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererNoop.ctorParameters = () => [];

class AdvancedRendererNoopModule {
}
AdvancedRendererNoopModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: AdvancedRenderer, useClass: AdvancedRendererNoop },
                ]
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererNoopModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { AdvancedRendererMethod, AdvancedRenderer, ExpressionType, literalExpression, elementExpression, callExpression, isExpression, isExpressionOfType, isLiteralExpression, isElementExpression, isCallExpression, AdvancedRendererModule, AdvancedRendererWorkerModule, initUiRenderer, ADVANCED_RENDERER_UI_PROVIDERS, AdvancedRendererNoopModule, ADVANCED_RENDERER_PROVIDERS as ɵb, AdvancedRendererImpl as ɵa, AdvancedRendererNoop as ɵe, AdvancedRendererUi as ɵd, AdvancedRendererWorker as ɵc };
