import * as tslib_1 from "tslib";
import { Injectable, NgModule, PLATFORM_INITIALIZER } from '@angular/core';
import { ClientMessageBrokerFactory, FnArg, ServiceMessageBrokerFactory, UiArguments } from '@angular/platform-webworker';
import { Serializer } from '@angular/platform-webworker/src/web_workers/shared/serializer';
var AdvancedRendererMethod = {};
AdvancedRendererMethod.execute = 0;
AdvancedRendererMethod.invokeElementMethod = 1;
AdvancedRendererMethod.invokeGlobalTargetMethod = 2;
AdvancedRendererMethod.setGlobalTargetPropery = 3;
AdvancedRendererMethod.getGlobalTargetProperty = 4;
AdvancedRendererMethod[AdvancedRendererMethod.execute] = "execute";
AdvancedRendererMethod[AdvancedRendererMethod.invokeElementMethod] = "invokeElementMethod";
AdvancedRendererMethod[AdvancedRendererMethod.invokeGlobalTargetMethod] = "invokeGlobalTargetMethod";
AdvancedRendererMethod[AdvancedRendererMethod.setGlobalTargetPropery] = "setGlobalTargetPropery";
AdvancedRendererMethod[AdvancedRendererMethod.getGlobalTargetProperty] = "getGlobalTargetProperty";
/**
 * @abstract
 */
var AdvancedRenderer = (function () {
    function AdvancedRenderer() {
    }
    /**
     * @abstract
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    AdvancedRenderer.prototype.execute = function (expression, args) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    AdvancedRenderer.prototype.invokeElementMethod = function (element, method, args) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    AdvancedRenderer.prototype.invokeGlobalTargetMethod = function (target, method, args) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    AdvancedRenderer.prototype.setGlobalTargetPropery = function (target, prop, value) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    AdvancedRenderer.prototype.getGlobalTargetProperty = function (target, prop) { };
    /**
     * @param {?} method
     * @return {?}
     */
    AdvancedRenderer.prototype.getMethod = function (method) {
        switch (method) {
            case AdvancedRendererMethod.execute: return this.execute;
            case AdvancedRendererMethod.getGlobalTargetProperty: return this.getGlobalTargetProperty;
            case AdvancedRendererMethod.invokeElementMethod: return this.invokeElementMethod;
            case AdvancedRendererMethod.invokeGlobalTargetMethod: return this.invokeGlobalTargetMethod;
            case AdvancedRendererMethod.setGlobalTargetPropery: return this.setGlobalTargetPropery;
            default: throw Error("AdvancedRenderer: Unkown method [" + method + "]");
        }
    };
    return AdvancedRenderer;
}());
var ExpressionType = {};
ExpressionType.Abstract = 0;
ExpressionType.Literal = 1;
ExpressionType.Call = 2;
ExpressionType.Element = 3;
ExpressionType[ExpressionType.Abstract] = "Abstract";
ExpressionType[ExpressionType.Literal] = "Literal";
ExpressionType[ExpressionType.Call] = "Call";
ExpressionType[ExpressionType.Element] = "Element";
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function literalExpression(value) {
    return { __expr_type: ExpressionType.Literal, value: value };
}
/**
 * @param {?} element
 * @return {?}
 */
function elementExpression(element) {
    return { __expr_type: ExpressionType.Element, value: element };
}
/**
 * @template T
 * @param {?} method
 * @param {?=} args
 * @return {?}
 */
function callExpression(method, args) {
    return { __expr_type: ExpressionType.Call, method: method, args: args };
}
/**
 * @param {?} obj
 * @return {?}
 */
function isExpression(obj) {
    return obj && ((obj)).__expr_type !== undefined;
}
/**
 * @template T
 * @param {?} type
 * @param {?} expr
 * @return {?}
 */
function isExpressionOfType(type, expr) {
    return expr && expr.__expr_type === type;
}
var isLiteralExpression = (isExpressionOfType.bind(null, ExpressionType.Literal));
var isElementExpression = (isExpressionOfType.bind(null, ExpressionType.Element));
var isCallExpression = (isExpressionOfType.bind(null, ExpressionType.Call));
var AdvancedRendererImpl = (function (_super) {
    tslib_1.__extends(AdvancedRendererImpl, _super);
    function AdvancedRendererImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererImpl.prototype.execute = function (expression, args) {
        var _a = this._resolveArgs(args), argNames = _a.argNames, argsResolved = _a.argsResolved;
        var /** @type {?} */ fn = new Function(argNames.join(','), expression);
        return Promise.resolve().then(function () { return fn.apply(void 0, argsResolved); });
    };
    /**
     * @param {?} element
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererImpl.prototype.invokeElementMethod = function (element, method, args) {
        return this.execute("return element." + method + ".apply(element, args)", { element: element, args: args });
    };
    /**
     * @param {?} target
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererImpl.prototype.invokeGlobalTargetMethod = function (target, method, args) {
        return this.execute("return " + target + "." + method + ".apply(" + target + ", args)", { args: args });
    };
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    AdvancedRendererImpl.prototype.setGlobalTargetPropery = function (target, prop, value) {
        this.execute(target + "." + prop + " = value", { value: value });
    };
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    AdvancedRendererImpl.prototype.getGlobalTargetProperty = function (target, prop) {
        return this.execute("return " + target + "." + prop);
    };
    /**
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererImpl.prototype._resolveArgs = function (args) {
        if (args === void 0) { args = {}; }
        var /** @type {?} */ argNames = Object.keys(args);
        var /** @type {?} */ argsResolved = this._resolveArgsArray(argNames.map(function (name) { return args[name]; }));
        return { argNames: argNames, argsResolved: argsResolved };
    };
    /**
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererImpl.prototype._resolveArgsArray = function (args) {
        var _this = this;
        return args.map(function (arg) { return _this._resolveExpression(arg); });
    };
    /**
     * @param {?} expr
     * @return {?}
     */
    AdvancedRendererImpl.prototype._resolveExpression = function (expr) {
        if (isExpression(expr)) {
            if (isLiteralExpression(expr) || isElementExpression(expr)) {
                return expr.value;
            }
            if (isCallExpression(expr)) {
                return this.getMethod(expr.method).apply(void 0, this._resolveArgsArray(expr.args));
            }
            throw Error("Unknown expression type '" + expr.__expr_type + "'");
        }
        else {
            return expr;
        }
    };
    return AdvancedRendererImpl;
}(AdvancedRenderer));
AdvancedRendererImpl.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererImpl.ctorParameters = function () { return []; };
var ADVANCED_RENDERER_PROVIDERS = [
    { provide: AdvancedRenderer, useClass: AdvancedRendererImpl },
];
var AdvancedRendererModule = (function () {
    function AdvancedRendererModule() {
    }
    return AdvancedRendererModule;
}());
AdvancedRendererModule.decorators = [
    { type: NgModule, args: [{
                providers: ADVANCED_RENDERER_PROVIDERS
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererModule.ctorParameters = function () { return []; };
var RENDERER_CHANNEL = 'RENDERER_CHANNEL';
var RENDERER_CALL_TASK = 'RENDERER_CALL_TASK';
var AdvancedRendererWorker = (function (_super) {
    tslib_1.__extends(AdvancedRendererWorker, _super);
    /**
     * @param {?} brokerFactory
     */
    function AdvancedRendererWorker(brokerFactory) {
        var _this = _super.call(this) || this;
        _this.brokerFactory = brokerFactory;
        _this.broker = _this.brokerFactory.createMessageBroker(RENDERER_CHANNEL, false);
        return _this;
    }
    /**
     * @param {?} expression
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererWorker.prototype.execute = function (expression, args) {
        return this._callTask(AdvancedRendererMethod.execute, [expression, args]);
    };
    /**
     * @param {?} element
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererWorker.prototype.invokeElementMethod = function (element, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeElementMethod, [elementExpression(element), method, args]);
    };
    /**
     * @param {?} target
     * @param {?} method
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererWorker.prototype.invokeGlobalTargetMethod = function (target, method, args) {
        return this._callTask(AdvancedRendererMethod.invokeGlobalTargetMethod, [target, method, args]);
    };
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    AdvancedRendererWorker.prototype.setGlobalTargetPropery = function (target, prop, value) {
        this._callTask(AdvancedRendererMethod.setGlobalTargetPropery, [target, prop, value]);
    };
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    AdvancedRendererWorker.prototype.getGlobalTargetProperty = function (target, prop) {
        return this._callTask(AdvancedRendererMethod.getGlobalTargetProperty, [target, prop]);
    };
    /**
     * @param {?} task
     * @param {?=} args
     * @return {?}
     */
    AdvancedRendererWorker.prototype._callTask = function (task, args) {
        var /** @type {?} */ taskArg = new FnArg(task, 1 /* PRIMITIVE */);
        var /** @type {?} */ argsArg = new FnArg(args, 1 /* PRIMITIVE */);
        var /** @type {?} */ uiArgs = new UiArguments(RENDERER_CALL_TASK, [taskArg, argsArg]);
        return this.broker.runOnService(uiArgs, 1 /* PRIMITIVE */);
    };
    return AdvancedRendererWorker;
}(AdvancedRenderer));
AdvancedRendererWorker.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererWorker.ctorParameters = function () { return [
    { type: ClientMessageBrokerFactory, },
]; };
var AdvancedRendererWorkerModule = (function () {
    function AdvancedRendererWorkerModule() {
    }
    return AdvancedRendererWorkerModule;
}());
AdvancedRendererWorkerModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: AdvancedRenderer, useClass: AdvancedRendererWorker },
                ]
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererWorkerModule.ctorParameters = function () { return []; };
var AdvancedRendererUi = (function () {
    /**
     * @param {?} brokerFactory
     * @param {?} renderer
     * @param {?} serializer
     */
    function AdvancedRendererUi(brokerFactory, renderer, serializer) {
        this.brokerFactory = brokerFactory;
        this.renderer = renderer;
        this.serializer = serializer;
        this.broker = this.brokerFactory.createMessageBroker(RENDERER_CHANNEL, false);
    }
    /**
     * @return {?}
     */
    AdvancedRendererUi.prototype.setup = function () {
        this.broker.registerMethod(RENDERER_CALL_TASK, [1 /* PRIMITIVE */, 1 /* PRIMITIVE */], this._callTask.bind(this), 1 /* PRIMITIVE */);
    };
    /**
     * @param {?} task
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererUi.prototype._callTask = function (task, args) {
        return this.renderer.getMethod(task).apply(void 0, this._deserializeArgs(args));
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    AdvancedRendererUi.prototype._deserializeArgs = function (arg) {
        var _this = this;
        if (Array.isArray(arg)) {
            return arg.map(function (a) { return _this._deserializeArgs(a); });
        }
        else if (typeof arg === 'object') {
            if (isElementExpression(arg)) {
                arg.value = this.serializer.deserialize(arg.value, 2 /* RENDER_STORE_OBJECT */);
            }
            else {
                Object.keys(arg || {}).forEach(function (key) { return arg[key] = _this._deserializeArgs(arg[key]); });
            }
        }
        return arg;
    };
    return AdvancedRendererUi;
}());
AdvancedRendererUi.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererUi.ctorParameters = function () { return [
    { type: ServiceMessageBrokerFactory, },
    { type: AdvancedRenderer, },
    { type: Serializer, },
]; };
/**
 * @param {?} renderer
 * @return {?}
 */
function initUiRenderer(renderer) {
    return function () { return renderer.setup(); };
}
var ADVANCED_RENDERER_UI_PROVIDERS = [
    ADVANCED_RENDERER_PROVIDERS,
    AdvancedRendererUi,
    { provide: PLATFORM_INITIALIZER, useFactory: initUiRenderer, deps: [AdvancedRendererUi], multi: true },
];
var AdvancedRendererNoop = (function (_super) {
    tslib_1.__extends(AdvancedRendererNoop, _super);
    function AdvancedRendererNoop() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} expression
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererNoop.prototype.execute = function (expression, args) {
        return Promise.resolve();
    };
    /**
     * @param {?} element
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererNoop.prototype.invokeElementMethod = function (element, method, args) {
        return Promise.resolve();
    };
    /**
     * @param {?} target
     * @param {?} method
     * @param {?} args
     * @return {?}
     */
    AdvancedRendererNoop.prototype.invokeGlobalTargetMethod = function (target, method, args) {
        return Promise.resolve();
    };
    /**
     * @param {?} target
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    AdvancedRendererNoop.prototype.setGlobalTargetPropery = function (target, prop, value) { };
    /**
     * @param {?} target
     * @param {?} prop
     * @return {?}
     */
    AdvancedRendererNoop.prototype.getGlobalTargetProperty = function (target, prop) {
        return Promise.resolve();
    };
    return AdvancedRendererNoop;
}(AdvancedRenderer));
AdvancedRendererNoop.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AdvancedRendererNoop.ctorParameters = function () { return []; };
var AdvancedRendererNoopModule = (function () {
    function AdvancedRendererNoopModule() {
    }
    return AdvancedRendererNoopModule;
}());
AdvancedRendererNoopModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: AdvancedRenderer, useClass: AdvancedRendererNoop },
                ]
            },] },
];
/**
 * @nocollapse
 */
AdvancedRendererNoopModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { AdvancedRendererMethod, AdvancedRenderer, ExpressionType, literalExpression, elementExpression, callExpression, isExpression, isExpressionOfType, isLiteralExpression, isElementExpression, isCallExpression, AdvancedRendererModule, AdvancedRendererWorkerModule, initUiRenderer, ADVANCED_RENDERER_UI_PROVIDERS, AdvancedRendererNoopModule, ADVANCED_RENDERER_PROVIDERS as ɵb, AdvancedRendererImpl as ɵa, AdvancedRendererNoop as ɵe, AdvancedRendererUi as ɵd, AdvancedRendererWorker as ɵc };
